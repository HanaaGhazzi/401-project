'use strict';
require('dotenv').config();
const schema = require('./user-schema');
const Model = require('../mongo-model');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcrypt');
const SECRET = process.env.SECRET;


class Users extends Model {
    constructor() {
        super(schema);
    }

    async save(record) {
        
        let data = await this.get({ username: record.username });

        if (data.length === 0) {
            record.password = await bcrypt.hash(record.password, 5);
            console.log('record after hash', record);
            return await this.create(record)
        }

        return Promise.reject('this user is already signUp');
    }

    generateToken(user) {
        console.log('inside getToken()');
        return jwt.sign(
            {
              _id: user._id,
              name: user.name,
              email: user.email,
              isAdmin: user.isAdmin,
              isSeller: user.isSeller,
            },
            process.env.SECRET || 'somethingsecret',
            {
              expiresIn: '30d',
            }
          );
    }
    // to verify the token that the user used from the client that was generated by jwt

    // async authenticateToken(token) {
    //     try {
    //         const tokenObj = jwt.verify(token, SECRET);
    //         // console.log(tokenObj)
    //         const check = await this.get({ name: tokenObj._id });
    //         if (check) {

    //             return Promise.resolve(tokenObj);
    //         } const secCheck = await this.get({ name: tokenObj.name });
    //         if (secCheck) {

    //             return Promise.resolve(tokenObj);
    //         }
    //         else {
    //             return Promise.reject();
    //         }
    //     } catch (err) {
    //         console.log('Invalid user');
    //         return Promise.reject(err);
    //     }
    // }

}
module.exports = new Users();